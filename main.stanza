; Generated by JITX 3.1.0
#use-added-syntax(jitx)
defpackage main :
  import core
  import jitx
  import jitx/commands
  import ocdb/utils/generic-components
  import helpers
  import components/adv7391
  import components/rp2040
  import ocdb/utils/generator-utils

; Define the shape/size of the board
val board-shape = RoundedRectangle(100.0, 100.0, 2.0)

pcb-module lm317a-regulator (output-voltage:Toleranced) :
  pin vin
  pin vout
  pin gnd
  pin adj

  inst lm317a : ocdb/components/unisonic/LM317A/component

  net (vin  lm317a.input)
  net (vout lm317a.output)
  
  cap-strap(lm317a.input, gnd, 0.1e-6)
  cap-strap(lm317a.output, gnd, 1.0e-6)
 
  ; inside pcb-module lm317a-regulator 
  schematic-group(self) = lm317a
  layout-group(self) = lm317a

  ; How much variability can we expect from the regulator alone?
  val refVoltage = property(lm317a.reference-voltage)
  val inherent-variance = tol+%(refVoltage)
  if inherent-variance > tol+%(output-voltage):
    fatal("Target design accuracy infeasible with LM317A %_ > %_" % [inherent-variance tol+%(output-voltage)])

  ; Budget variability for the voltage divider
  val target-variance = tol+%(output-voltage) - inherent-variance

  ; 5mA of voltage-divider current to compensate for regulator adj current
  val divider-current = 5.0e-3
  val adj-current = property(lm317a.adj-current) ; retrieve the property from the component definition
  ; Estimate offset voltage caused by current sourced from adj pin
  val est-v-adj-offset = (typ-value(output-voltage) - typ-value(refVoltage)) / divider-current * adj-current

  inst output-voltage-divider : ocdb/modules/passive-circuits/voltage-divider(source-voltage = high-voltage, divider-output = adj-voltage, current = current) where :
    val high-voltage = tol%(center-value(output-voltage) - est-v-adj-offset, 0.0)
    val adj-voltage = tol%(typ-value(refVoltage),target-variance)
    val current = divider-current

  ; Calculate the actual offset now that we know the optimized value of the resistors
  val true-adj-offset = adj-current * (property(output-voltage-divider.r-lo.resistance) as Double)
  val vref = property(output-voltage-divider.output-voltage)

  ; Calculate the possible min and max values for the output voltage
  val out = refVoltage * typ(center-value(output-voltage)) / vref + typ(true-adj-offset)

  ; Make sure that the voltage specification is met
  check ocdb/utils/checks/within?(output-voltage, out)

  net (output-voltage-divider.in lm317a.output) 
  net (output-voltage-divider.out lm317a.adj adj) 
  net (output-voltage-divider.lo gnd)


; Module to run as a design
pcb-module my-design :
  ; LDOs
  inst ldo3v3 : lm317a-regulator(tol%(3.3, 5.0))
  inst ldo1v8 : lm317a-regulator(tol%(1.8, 5.0))
  
  ; Video source
  inst adv : adv7391-module()

  ; BNC Outputs
  inst bnc1 : components/DOSIN-801-0084/component
  net (bnc1.SIG, adv.dac1)
  net (bnc1.GND, adv.gnd)

  inst bnc2 : components/DOSIN-801-0084/component
  net (bnc2.SIG, adv.dac2)
  net (bnc2.GND, adv.gnd)

  inst bnc3 : components/DOSIN-801-0084/component
  net (bnc3.SIG, adv.dac3)
  net (bnc3.GND, adv.gnd)

  ; MCU
  inst rp : rp2040-module()

  ; I2C
  net sda (rp.gpio[0], adv.sda)
  net scl (rp.gpio[1], adv.scl)
  res-strap(sda, rp.p3v3, 4.7e3)
  res-strap(scl, rp.p3v3, 4.7e3)

  ; 6 LEDs in RP2040 GPIOs 2 through 7
  for i in 2 through 7 do:
    inst led : components/HL-PST-1608S35FC/component
    net (led.a, rp.p3v3)
    res-strap(led.c, rp.gpio[i], 1.0e3)

  ; 2 buttons in RP2040 GPIOs 8 and 9
  for i in 8 through 9 do:
    inst btn : ocdb/components/korean-hroparts-elec/K2-1102SP-C4SC-04/component
    net (btn.p[3], rp.gnd)
    res-strap(btn.p[1], rp.p3v3, 10.0e3)
    net (btn.p[1], rp.gpio[i])

  ; USB
  inst usb : ocdb/components/korean-hroparts-elec/TYPE-C-31-M-12/module(SinkDefault)
  net (usb.usb-c.data[1].P, usb.usb-c.data[2].P, rp.usb_p)
  net (usb.usb-c.data[1].N, usb.usb-c.data[2].N, rp.usb_n)
  cap-strap(usb.usb-c.vbus.vdd, usb.usb-c.vbus.gnd, 1.0e-6)

  ; Power nets
  net v5v (ldo3v3.vin, ldo1v8.vin, usb.usb-c.vbus.vdd)
  net v3v3 (ldo3v3.vout, adv.p3v3, adv.vddio, rp.p3v3)
  net v1v8 (ldo1v8.vout, adv.p1v8)
  net gnd (ldo3v3.gnd, ldo1v8.gnd, adv.gnd, rp.gnd, usb.usb-c.vbus.gnd, usb.conn.SHIELD[0], usb.conn.SHIELD[1], usb.conn.SHIELD[2], usb.conn.SHIELD[3])

  ; Write the board version on silkscreen
  inst version-label  : ocdb/artwork/board-text/version-silkscreen("Version 0.0")
  place(version-label) at loc(0.0, height(board-shape) / 2.0 - 1.0) on Bottom

; Set the design name     - a directory with this name will be generated under the "designs" directory
;     the board           - a Board object
;     [optional] rules    - the PCB design rules (if not givn default rules will be used)
;     [optional] vendors  - Strings or AuthorizedVendors (if not give default vendors will be used)
;     [optional] quantity - Minimum stock quantity the vendor should carry (if not give default quantity will be used)
setup-design(
  "jitx-design",
  ocdb/utils/defaults/default-board(ocdb/manufacturers/stackups/jlcpcb-jlc2313, board-shape)
)

; override default rules
; to stop large soldermask openings
pcb-rules rules :
  min-copper-width = 0.13 ; 5mil
  min-copper-copper-space = 0.2 ; 
  min-copper-hole-space = 0.2032 ; 8mil
  min-copper-edge-space = 0.381 ; 10mil outer, but 15mil inner
  min-annular-ring = 0.1524 ; 6mil
  min-drill-diameter = 0.254 ; 10mil
  min-silkscreen-width = 0.0762 ; 3mil
  min-pitch-leaded = 0.35 ; guess
  min-pitch-bga = 0.35 ; guess
  max-board-width = 457.2 ; 18in
  max-board-height = 609.6 ; 24in
  solder-mask-registration = 0.0
  min-silk-solder-mask-space = 0.15
  min-silkscreen-text-height = 0.762
  min-th-pad-expand-outer = 0.0
  min-soldermask-opening = 0.0
  min-soldermask-bridge = 0.0
  min-hole-to-hole = 0.254
  min-pth-pin-solder-clearance = 3.0

set-rules(rules)

; Set the schematic sheet size
set-paper(ANSI-A)

; Set the top level module (the module to be compile into a schematic and PCB)
set-main-module(my-design)

; export to kicad
set-export-backend(`kicad)
set-use-layout-groups()
export-cad()

; Use any helper function from helpers.stanza here
; run-check-on-design(my-design)

; View the results
view-board()
; view-schematic()
; view-design-explorer()
view-bom(BOM-STD)
